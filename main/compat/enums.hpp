/**
 * @file main/compat/enums.hpp
 */
#pragma once
#include <any>
#include <string>
#include <unordered_map>
#include <vector>

#define SEC_KEY_LENGTH 16

using Payload = std::unordered_map<std::string, std::any>;
using Buffer = std::vector<uint8_t>;

struct BuffaloZclOptions {
  uint32_t length;
};

#define COMMAND_ID_LIST \
    TS(GET_MODULE_VERSION, 0x0001) \
    TS(NCP_RESET, 0x0002) \
    TS(GET_ZIGBEE_ROLE, 0x0004) \
    TS(SET_ZIGBEE_ROLE, 0x0005) \
    TS(GET_ZIGBEE_CHANNEL_MASK, 0x0006) \
    TS(SET_ZIGBEE_CHANNEL_MASK, 0x0007) \
    TS(GET_ZIGBEE_CHANNEL, 0x0008) \
    TS(GET_PAN_ID, 0x0009) \
    TS(SET_PAN_ID, 0x000a) \
    TS(GET_LOCAL_IEEE_ADDR, 0x000b) \
    TS(SET_LOCAL_IEEE_ADDR, 0x000c) \
    TS(GET_TX_POWER, 0x0010) \
    TS(SET_TX_POWER, 0x0011) \
    TS(GET_RX_ON_WHEN_IDLE, 0x0012) \
    TS(SET_RX_ON_WHEN_IDLE, 0x0013) \
    TS(GET_JOINED, 0x0014) \
    TS(GET_AUTHENTICATED, 0x0015) \
    TS(GET_ED_TIMEOUT, 0x0016) \
    TS(SET_ED_TIMEOUT, 0x0017) \
    TS(SET_NWK_KEY, 0x001b) \
    TS(GET_NWK_KEYS, 0x001e) \
    TS(GET_APS_KEY_BY_IEEE, 0x001f) \
    TS(GET_PARENT_ADDRESS, 0x0022) \
    TS(GET_EXTENDED_PAN_ID, 0x0023) \
    TS(GET_COORDINATOR_VERSION, 0x0024) \
    TS(GET_SHORT_ADDRESS, 0x0025) \
    TS(GET_TRUST_CENTER_ADDRESS, 0x0026) \
    TS(NCP_RESET_IND, 0x002b) \
    TS(NVRAM_WRITE, 0x002e) \
    TS(NVRAM_READ, 0x002f) \
    TS(NVRAM_ERASE, 0x0030) \
    TS(NVRAM_CLEAR, 0x0031) \
    TS(SET_TC_POLICY, 0x0032) \
    TS(SET_EXTENDED_PAN_ID, 0x0033) \
    TS(SET_MAX_CHILDREN, 0x0034) \
    TS(GET_MAX_CHILDREN, 0x0035) \
    TS(AF_SET_SIMPLE_DESC, 0x0101) \
    TS(AF_DEL_SIMPLE_DESC, 0x0102) \
    TS(AF_SET_NODE_DESC, 0x0103) \
    TS(AF_SET_POWER_DESC, 0x0104) \
    TS(ZDO_NWK_ADDR_REQ, 0x0201) \
    TS(ZDO_IEEE_ADDR_REQ, 0x0202) \
    TS(ZDO_POWER_DESC_REQ, 0x0203) \
    TS(ZDO_NODE_DESC_REQ, 0x0204) \
    TS(ZDO_SIMPLE_DESC_REQ, 0x0205) \
    TS(ZDO_ACTIVE_EP_REQ, 0x0206) \
    TS(ZDO_MATCH_DESC_REQ, 0x0207) \
    TS(ZDO_BIND_REQ, 0x0208) \
    TS(ZDO_UNBIND_REQ, 0x0209) \
    TS(ZDO_MGMT_LEAVE_REQ, 0x020a) \
    TS(ZDO_PERMIT_JOINING_REQ, 0x020b) \
    TS(ZDO_DEV_ANNCE_IND, 0x020c) \
    TS(ZDO_REJOIN, 0x020d) \
    TS(ZDO_SYSTEM_SRV_DISCOVERY_REQ, 0x020e) \
    TS(ZDO_MGMT_BIND_REQ, 0x020f) \
    TS(ZDO_MGMT_LQI_REQ, 0x0210) \
    TS(ZDO_MGMT_NWK_UPDATE_REQ, 0x0211) \
    TS(ZDO_GET_STATS, 0x0213) \
    TS(ZDO_DEV_AUTHORIZED_IND, 0x0214) \
    TS(ZDO_DEV_UPDATE_IND, 0x0215) \
    TS(ZDO_SET_NODE_DESC_MANUF_CODE, 0x0216) \
    TS(APSDE_DATA_REQ, 0x0301) \
    TS(APSME_BIND, 0x0302) \
    TS(APSME_UNBIND, 0x0303) \
    TS(APSME_ADD_GROUP, 0x0304) \
    TS(APSME_RM_GROUP, 0x0305) \
    TS(APSDE_DATA_IND, 0x0306) \
    TS(APSME_RM_ALL_GROUPS, 0x0307) \
    TS(APS_CHECK_BINDING, 0x0308) \
    TS(APS_GET_GROUP_TABLE, 0x0309) \
    TS(APSME_UNBIND_ALL, 0x030a) \
    TS(NWK_FORMATION, 0x0401) \
    TS(NWK_DISCOVERY, 0x0402) \
    TS(NWK_NLME_JOIN, 0x0403) \
    TS(NWK_PERMIT_JOINING, 0x0404) \
    TS(NWK_GET_IEEE_BY_SHORT, 0x0405) \
    TS(NWK_GET_SHORT_BY_IEEE, 0x0406) \
    TS(NWK_GET_NEIGHBOR_BY_IEEE, 0x0407) \
    TS(NWK_REJOINED_IND, 0x0409) \
    TS(NWK_REJOIN_FAILED_IND, 0x040a) \
    TS(NWK_LEAVE_IND, 0x040b) \
    TS(PIM_SET_FAST_POLL_INTERVAL, 0x040e) \
    TS(PIM_SET_LONG_POLL_INTERVAL, 0x040f) \
    TS(PIM_START_FAST_POLL, 0x0410) \
    TS(PIM_START_LONG_POLL, 0x0411) \
    TS(PIM_START_POLL, 0x0412) \
    TS(PIM_STOP_FAST_POLL, 0x0414) \
    TS(PIM_STOP_POLL, 0x0415) \
    TS(PIM_ENABLE_TURBO_POLL, 0x0416) \
    TS(PIM_DISABLE_TURBO_POLL, 0x0417) \
    TS(NWK_PAN_ID_CONFLICT_RESOLVE, 0x041a) \
    TS(NWK_PAN_ID_CONFLICT_IND, 0x041b) \
    TS(NWK_ADDRESS_UPDATE_IND, 0x041c) \
    TS(NWK_START_WITHOUT_FORMATION, 0x041d) \
    TS(NWK_NLME_ROUTER_START, 0x041e) \
    TS(PARENT_LOST_IND, 0x0420) \
    TS(PIM_START_TURBO_POLL_PACKETS, 0x0424) \
    TS(PIM_START_TURBO_POLL_CONTINUOUS, 0x0425) \
    TS(PIM_TURBO_POLL_CONTINUOUS_LEAVE, 0x0426) \
    TS(PIM_TURBO_POLL_PACKETS_LEAVE, 0x0427) \
    TS(PIM_PERMIT_TURBO_POLL, 0x0428) \
    TS(PIM_SET_FAST_POLL_TIMEOUT, 0x0429) \
    TS(PIM_GET_LONG_POLL_INTERVAL, 0x042a) \
    TS(PIM_GET_IN_FAST_POLL_FLAG, 0x042b) \
    TS(SET_KEEPALIVE_MOVE, 0x042c) \
    TS(START_CONCENTRATOR_MODE, 0x042d) \
    TS(STOP_CONCENTRATOR_MODE, 0x042e) \
    TS(NWK_ENABLE_PAN_ID_CONFLICT_RESOLUTION, 0x042f) \
    TS(NWK_ENABLE_AUTO_PAN_ID_CONFLICT_RESOLUTION, 0x0430) \
    TS(PIM_TURBO_POLL_CANCEL_PACKET, 0x0431) \
    TS(SECUR_SET_LOCAL_IC, 0x0501) \
    TS(SECUR_ADD_IC, 0x0502) \
    TS(SECUR_DEL_IC, 0x0503) \
    TS(SECUR_GET_LOCAL_IC, 0x050d) \
    TS(SECUR_TCLK_IND, 0x050e) \
    TS(SECUR_TCLK_EXCHANGE_FAILED_IND, 0x050f) \
    TS(SECUR_NWK_INITIATE_KEY_SWITCH_PROCEDURE, 0x0517) \
    TS(SECUR_GET_IC_LIST, 0x0518) \
    TS(SECUR_GET_IC_BY_IDX, 0x0519) \
    TS(SECUR_REMOVE_ALL_IC, 0x051a) \
    TS(UNKNOWN_1, 0x0a02)

enum class CommandId {
#define TS(a, b) a = b,
  COMMAND_ID_LIST
#undef TS
};

const std::unordered_map<uint16_t, std::string> COMMAND_ID_NAMES = {
#define TS(a, b) { b, #a },
  COMMAND_ID_LIST
#undef TS
};

#define COMMAND_ID_NAME(command_id) COMMAND_ID_NAMES.at((uint16_t)command_id)

enum class ResetOptions {
    NoOptions = 0,
    EraseNVRAM = 1,
    FactoryReset = 2,
    LockReadingKeys = 3,
};

enum class BuffaloZBOSSDataType {
    LIST_TYPED = 3000,
    EXTENDED_PAN_ID = 3001,
};

enum class DeviceType {
    COORDINATOR = 0x00,
    ROUTER = 0x01,
    ED = 0x02,
    NONE = 0x03,
};

enum class PolicyType : uint8_t {
    LINK_KEY_REQUIRED = 0,
    IC_REQUIRED = 1,
    TC_REJOIN_ENABLED = 2,
    IGNORE_TC_REJOIN = 3,
    APS_INSECURE_JOIN = 4,
    DISABLE_NWK_MGMT_CHANNEL_UPDATE = 5,
};
